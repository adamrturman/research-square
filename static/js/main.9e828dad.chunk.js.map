{"version":3,"sources":["styles/Components.module.css","ExpensiveOrder/ExpensiveOrder.js","MostCustomerOrders/MostCustomerOrders.js","TotalOrdersByYear/TotalOrdersByYear.js","services/dataService.js","img/research-square-logo.svg","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ExpensiveOrder","props","totalPrices","orders","map","customer","parseInt","total_price","maxTotalPrice","Math","max","className","styles","green","MostCustomerOrdersRow","maxOrderId","customers","maxOrderCustomerId","find","order","customer_id","findMaxOrderCustomerId","maxCustomerName","id","name","TotalOrdersByYears","totalPriceOfOrders","reduce","accumulator","orderYear","Date","created_date","getFullYear","has","currentSumByYear","get","set","Map","formattedTotalsByYear","Array","from","year","total","a","axios","App","useState","isLoaded","setIsLoaded","setOrders","setCustomers","useEffect","fetchData","then","data","catch","error","alert","class","src","logo","MostCustomerOrders","TotalOrdersByYear","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,MAAQ,4B,8ICgBXC,MAdf,SAAwBC,GACpB,IAAMC,EAAcD,EAAME,OAAOC,KAAI,SAACC,GAClC,OAAOC,SAASD,EAASE,gBAGvBC,EAAgBC,KAAKC,IAAL,MAAAD,KAAI,YAAQP,IAElC,OACI,wDAC0B,uBAAMS,UAAWC,IAAOC,MAAxB,cAAiCL,SCqBpDM,MA9Bf,SAA+Bb,GAAQ,IAeDc,EAd3BZ,EAAqBF,EAArBE,OAAQa,EAAaf,EAAbe,UAmBTC,EAjBN,WACI,IAAMf,EAAcC,EAAOC,KAAI,SAACC,GAC5B,OAAOC,SAASD,EAASE,gBAGvBC,EAAgBC,KAAKC,IAAL,MAAAD,KAAI,YAAQP,IAIlC,OAFiBC,EAAOe,MAAK,SAAAC,GAAK,OAAIA,EAAMZ,cAAgBC,KAE5CY,YAQOC,GACrBC,GAN4BP,EAMeE,EALvBD,EAAUE,MAAK,SAAAb,GAAQ,OAAIA,EAASkB,KAAOR,KAC5CS,MAMzB,OACI,iEACmC,sBAAMb,UAAWC,IAAOC,MAAxB,SAAgCS,QCS5DG,MAlCf,SAA4BxB,GAkBxB,IAAMyB,EAhBgBzB,EAAME,OAAOwB,QAAO,SAACC,EAAaT,GAChD,IAAMU,EAAY,IAAIC,KAAKX,EAAMY,cAAcC,cAE/C,GAAIJ,EAAYK,IAAIJ,GAAY,CAC5B,IAAMK,EAAmBN,EAAYO,IAAIN,GACzCD,EAAYQ,IAAIP,EAAWK,EAAmBf,EAAMZ,kBAEpDqB,EAAYQ,IAAIP,EAAWV,EAAMZ,aAGrC,OAAOqB,IACR,IAAIS,KAULC,EAFsBC,MAAMC,KAAKd,GAAoB,yCAAoB,CAAEe,KAAtB,KAA4BC,MAA5B,SAETtC,KAAI,SAAAqC,GAAI,OACtD,+BAAKA,EAAKA,KAAV,OAAoBA,EAAKC,YAG7B,OACI,wDAC0B,sBAAM/B,UAAWC,IAAOC,MAAxB,SAAgCyB,Q,qFC9B3D,sBAAAK,EAAA,+EACIC,IAAMT,IAAI,gHADd,4C,gCCFQ,MAA0B,iDCsC1BU,MA9Bf,WAAgB,IAAD,EACmBC,oBAAS,GAD5B,mBACNC,EADM,KACIC,EADJ,OAEeF,mBAAS,IAFxB,mBAEN3C,EAFM,KAEE8C,EAFF,OAGqBH,mBAAS,IAH9B,mBAGN9B,EAHM,KAGKkC,EAHL,KAeb,OAVAC,qBAAU,YFXL,WAAP,gCEYMC,GACCC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPL,EAAUK,EAAKnD,QACf+C,EAAaI,EAAKtC,WAClBgC,GAAY,MAEbO,OAAM,SAAAC,GAAK,OAAIC,MAAMD,QACvB,IAECT,EAKF,sBAAKpC,UAAU,MAAf,UACI,qBAAK+C,MAAM,OAAOC,IAAKC,IACvB,uBACA,cAAC,EAAD,CAAgBzD,OAAQA,IACxB,cAAC0D,EAAD,CAAoB1D,OAAQA,EAAQa,UAAWA,IAC/C,cAAC8C,EAAD,CAAoB3D,OAAQA,OATzB,4CCZI4D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9e828dad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"green\":\"Components_green__2Q4pZ\"};","import React from 'react';\nimport styles from '../styles/Components.module.css';\n\nfunction ExpensiveOrder(props) {\n    const totalPrices = props.orders.map((customer) => {\n        return parseInt(customer.total_price);\n    });\n\n    const maxTotalPrice = Math.max(...totalPrices);\n    \n    return (\n        <h2>\n            Most Expensive Order: <span className={styles.green}>${maxTotalPrice}</span>\n        </h2>\n    );\n}\n\nexport default ExpensiveOrder;","import React from 'react';\nimport styles from '../styles/Components.module.css';\n\nfunction MostCustomerOrdersRow(props) {\n    const {orders, customers} = props;\n\n    function findMaxOrderCustomerId() {\n        const totalPrices = orders.map((customer) => {\n            return parseInt(customer.total_price);\n        });\n    \n        const maxTotalPrice = Math.max(...totalPrices);\n    \n        const maxOrder = orders.find(order => order.total_price === maxTotalPrice);\n\n        return maxOrder.customer_id;\n    }\n\n    function findCustomerWithMaxOrder(maxOrderId) {\n        const foundCustomer = customers.find(customer => customer.id === maxOrderId);\n        return foundCustomer.name;\n    }\n\n    const maxOrderCustomerId = findMaxOrderCustomerId();\n    const maxCustomerName = findCustomerWithMaxOrder(maxOrderCustomerId);\n\n    return (\n        <h2>\n            Customer with the most orders= <span className={styles.green}>{maxCustomerName}</span>\n        </h2>\n    );\n}\n\nexport default MostCustomerOrdersRow;\n","import React from 'react';\nimport styles from '../styles/Components.module.css';\n\nfunction TotalOrdersByYears(props) {\n    function getOrdersSumByYear() {\n        const sumByYear = props.orders.reduce((accumulator, order) => {\n            const orderYear = new Date(order.created_date).getFullYear();\n\n            if (accumulator.has(orderYear)) {\n                const currentSumByYear = accumulator.get(orderYear);\n                accumulator.set(orderYear, currentSumByYear + order.total_price);\n            } else {\n                accumulator.set(orderYear, order.total_price)\n            }\n            \n            return accumulator;\n        }, new Map());\n\n        return sumByYear;\n    }\n\n    const totalPriceOfOrders = getOrdersSumByYear()\n\n    // converting the totalPriceOfOrders Map into an array of objects, each contains the year and order total\n    const arrayOfTotalsByYear = Array.from(totalPriceOfOrders, ([year, total]) => ({ year, total }));\n\n    const formattedTotalsByYear = arrayOfTotalsByYear.map(year => (\n        <li>{year.year} - ${year.total}</li>\n    ));\n\n    return (\n        <h2>\n            Total Orders by year: <span className={styles.green}>{formattedTotalsByYear}</span>\n        </h2>\n    );\n}\n\nexport default TotalOrdersByYears;\n","import axios from 'axios'\n\nexport async function fetchData(){\n    return axios.get(\"https://cors-anywhere.herokuapp.com/https://rs-coding-exercise.s3.amazonaws.com/2020/orders-2020-02-10.json\");\n}","export default __webpack_public_path__ + \"static/media/research-square-logo.63a69446.svg\";","import React, { useState, useEffect } from 'react';\nimport ExpensiveOrder from './ExpensiveOrder/ExpensiveOrder';\nimport MostCustomerOrders from './MostCustomerOrders/MostCustomerOrders';\nimport TotalOrdersByYears from './TotalOrdersByYear/TotalOrdersByYear';\nimport { fetchData } from './services/dataService';\nimport './App.css';\nimport logo from './img/research-square-logo.svg';\n\nfunction App() {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [orders, setOrders] = useState([]);\n  const [customers, setCustomers] = useState([]);\n\n  useEffect(() => {\n      fetchData()\n      .then(({ data }) => {\n        setOrders(data.orders);\n        setCustomers(data.customers);\n        setIsLoaded(true);\n      })\n      .catch(error => alert(error))\n  }, []);\n\n  if(!isLoaded) {\n    return <div>Spinner!</div>;\n  }\n\n  return (\n    <div className=\"App\">\n        <img class=\"logo\" src={logo} />\n        <hr/>\n        <ExpensiveOrder orders={orders} />\n        <MostCustomerOrders orders={orders} customers={customers}/>\n        <TotalOrdersByYears orders={orders} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}