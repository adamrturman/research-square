{"version":3,"sources":["styles/Components.module.css","ExpensiveOrder/ExpensiveOrder.js","MostCustomerOrders/MostCustomerOrders.js","TotalOrdersByYear/TotalOrdersByYear.js","img/research-square-logo.svg","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ExpensiveOrder","props","totalPrices","orders","map","customer","parseInt","total_price","maxTotalPrice","Math","max","className","styles","green","MostCustomerOrdersRow","maxCustomerName","maxOrderId","customers","length","find","id","name","findCustomerWithMaxOrder","maxOrder","customer_id","findMaxOrderCustomerId","filter","order","TotalOrdersByYears","totalPriceOfOrders","reduce","accumulator","orderYear","Date","created_date","getFullYear","has","currentSumByYear","get","set","Map","mappedTotalsByYear","Array","from","year","total","App","useState","setOrders","setCustomers","useEffect","axios","then","data","catch","error","alert","src","logo","MostCustomerOrders","TotalOrdersByYear","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,MAAQ,4B,8ICeXC,MAbf,SAAwBC,GAEpB,IAAMC,EAAcD,EAAME,OAAOC,KAAI,SAACC,GAClC,OAAOC,SAASD,EAASE,gBAIvBC,EAAgBC,KAAKC,IAAL,MAAAD,KAAI,YAAQP,IAClC,OACI,wDAA0B,uBAAMS,UAAWC,IAAOC,MAAxB,cAAiCL,KAA3D,QCuBOM,MA/Bf,SAA+Bb,GAE3B,IAAMC,EAAcD,EAAME,OAAOC,KAAI,SAACC,GAClC,OAAOC,SAASD,EAASE,gBAIvBC,EAAgBC,KAAKC,IAAL,MAAAD,KAAI,YAAQP,IAmB5Ba,EATN,SAAkCC,EAAYC,GAC1C,GAAIA,EAAUC,OAAS,EAEnB,OADsBD,EAAUE,MAAK,SAAAd,GAAQ,OAAIA,EAASe,KAAOJ,KAC5CK,KAMLC,CAfxB,SAAgCC,GAC5B,GAAIA,EACA,OAAOA,EAASC,YAWGC,CAfVxB,EAAME,OAAOuB,QAAO,SAAAC,GAAK,OAAIA,EAAMpB,cAAgBC,KAeT,IAEUP,EAAMgB,WAE3E,OAAO,iEAAmC,sBAAMN,UAAWC,IAAOC,MAAxB,SAAgCE,QCF/Da,MA3Bf,SAA4B3B,GAgBxB,IAAM4B,EAbgB5B,EAAME,OAAO2B,QAAO,SAACC,EAAaJ,GAChD,IAAMK,EAAY,IAAIC,KAAKN,EAAMO,cAAcC,cAC/C,GAAIJ,EAAYK,IAAIJ,GAAY,CAC5B,IAAMK,EAAmBN,EAAYO,IAAIN,GACzCD,EAAYQ,IAAIP,EAAWK,EAAmBV,EAAMpB,kBAEpDwB,EAAYQ,IAAIP,EAAWL,EAAMpB,aAErC,OAAOwB,IACR,IAAIS,KASLC,EAFsBC,MAAMC,KAAKd,GAAoB,yCAAoB,CAAEe,KAAtB,KAA4BC,MAA5B,SAEZzC,KAAI,SAACwC,GAAD,OAC/C,+BAAKA,EAAKA,KAAV,OAAoBA,EAAKC,YAE7B,OAAO,wDAA0B,sBAAMlC,UAAWC,IAAOC,MAAxB,SAAgC4B,Q,sCC3BtD,MAA0B,iDCoC1BK,MA3Bf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACN5C,EADM,KACE6C,EADF,OAEqBD,mBAAS,IAF9B,mBAEN9B,EAFM,KAEKgC,EAFL,KAcb,OAVAC,qBAAU,WACRC,IAAMb,IAAI,2EAEPc,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPL,EAAUK,EAAKlD,QACf8C,EAAaI,EAAKpC,cAEnBqC,OAAM,SAAAC,GAAK,OAAIC,MAAMD,QACvB,IAGD,sBAAK5C,UAAU,MAAf,UACE,6BAAI,qBAAK8C,IAAKC,MACZ,uBACA,qCACA,cAAC,EAAD,CAAgBvD,OAAQA,IACxB,cAACwD,EAAD,CAAoBxD,OAAQA,EAAQc,UAAWA,IAC/C,cAAC2C,EAAD,CAAoBzD,OAAQA,WClBrB0D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d334a2b5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"green\":\"Components_green__2Q4pZ\"};","import React from 'react'\nimport styles from '../styles/Components.module.css'\n\nfunction ExpensiveOrder(props) {\n\n    const totalPrices = props.orders.map((customer) => {\n        return parseInt(customer.total_price);\n    }\n    )\n\n    const maxTotalPrice = Math.max(...totalPrices);\n    return (\n        <h2>Most Expensive Order: <span className={styles.green}>${maxTotalPrice}</span> </h2>\n    )\n}\n\nexport default ExpensiveOrder","import React from 'react'\nimport styles from '../styles/Components.module.css'\n\n\nfunction MostCustomerOrdersRow(props) {\n\n    const totalPrices = props.orders.map((customer) => {\n        return parseInt(customer.total_price);\n    }\n    )\n\n    const maxTotalPrice = Math.max(...totalPrices);\n\n    const maxOrder = props.orders.filter(order => order.total_price === maxTotalPrice)\n\n    function findMaxOrderCustomerId(maxOrder) {\n        if (maxOrder) {\n            return maxOrder.customer_id\n        }\n    }\n\n    function findCustomerWithMaxOrder(maxOrderId, customers) {\n        if (customers.length > 0) {\n            const foundCustomer = customers.find(customer => customer.id === maxOrderId);\n            return foundCustomer.name;\n        }\n    }\n\n    const maxOrderCustomerId = findMaxOrderCustomerId(maxOrder[0])\n\n    const maxCustomerName = findCustomerWithMaxOrder(maxOrderCustomerId, props.customers)\n\n    return <h2>Customer with the most orders= <span className={styles.green}>{maxCustomerName}</span></h2>\n}\n\nexport default MostCustomerOrdersRow","import React from 'react'\nimport styles from '../styles/Components.module.css'\n\nfunction TotalOrdersByYears(props) {\n\n    function printTotalPriceOfOrders() {\n        const sumByYear = props.orders.reduce((accumulator, order) => {\n            const orderYear = new Date(order.created_date).getFullYear();\n            if (accumulator.has(orderYear)) {\n                const currentSumByYear = accumulator.get(orderYear);\n                accumulator.set(orderYear, currentSumByYear + order.total_price);\n            } else {\n                accumulator.set(orderYear, order.total_price)\n            }\n            return accumulator;\n        }, new Map());\n        return sumByYear;\n    }\n\n    const totalPriceOfOrders = printTotalPriceOfOrders()\n\n\n    const arrayOfTotalsByYear = Array.from(totalPriceOfOrders, ([year, total]) => ({ year, total }));\n\n    const mappedTotalsByYear = arrayOfTotalsByYear.map((year) => (\n        <li>{year.year} - ${year.total}</li>\n    ))\n    return <h2>Total Orders by year: <span className={styles.green}>{mappedTotalsByYear}</span></h2>\n}\n\nexport default TotalOrdersByYears","export default __webpack_public_path__ + \"static/media/research-square-logo.63a69446.svg\";","import React, { useState, useEffect } from 'react'\nimport ExpensiveOrder from './ExpensiveOrder/ExpensiveOrder'\nimport MostCustomerOrders from './MostCustomerOrders/MostCustomerOrders'\nimport TotalOrdersByYears from './TotalOrdersByYear/TotalOrdersByYear'\nimport axios from 'axios'\nimport { fetchData } from './services/dataService'\nimport './App.css';\nimport logo from './img/research-square-logo.svg'\n\nfunction App() {\n  const [orders, setOrders] = useState([]);\n  const [customers, setCustomers] = useState([]);\n\n  useEffect(() => {\n    axios.get(\"https://rs-coding-exercise.s3.amazonaws.com/2020/orders-2020-02-10.json\")\n      // fetchData()\n      .then(({ data }) => {\n        setOrders(data.orders);\n        setCustomers(data.customers);\n      })\n      .catch(error => alert(error))\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h1><img src={logo} /></h1>\n        <hr/>\n        <>\n        <ExpensiveOrder orders={orders} />\n        <MostCustomerOrders orders={orders} customers={customers}/>\n        <TotalOrdersByYears orders={orders} />\n        </>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}